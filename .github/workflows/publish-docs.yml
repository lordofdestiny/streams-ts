name: Generate Docs for GitHub Pages

on:
  release:
    types: [ released ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false
          
jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js environment
        uses: actions/setup-node@v4.0.2
        with:
          node-version: 20
          cache: 'npm'         
      - run: npm ci
      - name: Generate Docs
        run: npm run docs
      - name: Extract coverage
        run: |
          npm run coverage:badges
          node scripts/extract-coverage.js >> $GITHUB_ENV
      - name: Create coverage badges
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.COVERAGE_SECRET }}
          gistID: "e080b14c85e64df5b56f68242a183a5a"
          filename: stream-ts-coverage.json
          label: Coverage of stream-ts
          message: is ${{ env.COVERAGE_VALUE }}%
          valColorRange: ${{ env.COVERAGE_VALUE }}
          minColorRange: 60
          maxColorRange: 95
          namedLogo: jest
          labelColor: "#FF5733"
          logoColor: "#C21325"
          style : for-the-badge
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
